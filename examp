import logging
import asyncio
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, filters
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import re
from datetime import datetime
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type
import nest_asyncio
import telegram.error

nest_asyncio.apply()

# Telegram Bot Token
TELEGRAM_TOKEN = '8333254936:AAFZ4JbBbU_-5PnMXlm0y4TIpFsHt8TkgEs'

# Google Sheets Setup
SCOPE = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
CREDS = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', SCOPE)
CLIENT = gspread.authorize(CREDS)
SHEET_NAME = '9_ტონა_ფული'
WORKSHEET_NAME = 'Payments'

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Pending messages for edits
pending_messages = set()

# Default customers list (duplicates removed)
DEFAULT_CUSTOMERS = [
    "(62004022906) ბაჩუკი უშხვანი",
    "(31001007442-დღგ) ნათია ვარამაშვილი",
    "(405361629-დღგ) შპს ვარკეთილი მენეჯმენტი",
    "(405431536-დღგ) შპს ბაფფალოს",
    "(406498847-დღგ) შპს გლოვ შაურმა",
    "(406444209-დღგ) შპს ძაძიკი",
    "(405374107-დღგ) შპს ბიგ სემი",
    "(01026000081-დღგ) დინარა შავერდოვა",
    "(405448074-დღგ) შპს ფუდ გუდი",
    "(405458320-დღგ) შპს სპექტრა",
    "(404594239-დღგ) შპს ვალენტინო ჯორჯია",
    "(205253571-დღგ) შპს გალაქტიკა 5",
    "(405419710-დღგ) შპს ვრაპ მასტერი",
    "(405368463-დღგ) შპს ელსი კატერინგი",
    "(404851255-დღგ) შპს თაღლაურა მენეჯმენტ კომპანი",
    "(402116134-დღგ) შპს კუში ინდიან ფუდ",
    "(402322991) შპს კუში ფუდი",
    "(405604190-დღგ) შპს ბუკა202",
    "(406482435) შპს დე მედ შefi",
    "(400384179-დღგ) შპს წიწილა გრუპ",
    "(405141029-დღგ) შპს ფასანაური 2016",
    "(400320461) შპს ბურგერების სამინისტრო",
    "(01006018626-დღგ) ბექა გილიგაშვილი",
    "(17001032188-დღგ) ბარბარა სოხანეიშვილი - ბეიქერი ფუმფულა",
    "(400401944-დღგ) შპს მედვენთა",
    "(405680561-დღგ) შპს ქუალითი ფუდს",
    "(01005034623) სანდრო ჩილაძე",
    "(400403194-დღგ) შპს ვინი2024",
    "(404478855-დღგ) შპს მაქსი ლენდი",
    "(402150051-დღგ) შპს გლდანი მენეჯმენტი",
    "(202243802-დღგ) შპს თავადური",
    "(402085015-დღგ) შპს პლაზა მენეჯმენტი",
    "(202200778-დღგ) შპს წისქვილი ჯგუფი",
    "(62011004104-დღგ) ხატია ჭითანავა",
    "(60001017855) გიორგი არაბიძე",
    "(405241493-დღგ) შპს ფასანაური 2017",
    "(25001008253-დღგ) იზა შუბითიძე - პრემიუმ სენდვიჩი",
    "(405135946-დღგ) შპს მაგსი",
    "(01008057492-დღგ) ნინო მუშკუდიანი",
    "(402097271-დღგ) შპს ზემელი",
    "(405366296) შპს ლავა შაურმა",
    "(405587949-დღგ) შპს აკიდო 2023",
    "(405638476-დღგ) შპს კომანდოსი",
    "(445700493-დღგ) შპს ფიესტა ბარი",
    "(405433482-დღგ) შპს ფუდ ენდ ვაინ",
    "(405252471-დღგ) სს სუში მანია",
    "(405463305-დღგ) შპს ფასანაური 2021",
    "(405624301-დღგ) შპს გენაცვალე ფუდ დელივერი",
    "(01027076106) გიორგი რაზმაძე",
    "(43001003605) მალხაზ ტეტუნაშვილი",
    "(400218055-დღგ) შპს სტილი",
    "(65002013380-დღგ) ომეხი ჩხაპელია",
    "(01901141269-დღგ) სულხან თვალჭრელიძე",
    "(443573857-დღგ) შპს ერთი ნაბიჯი 20",
    "(405452567-დღგ) შპს სამიკიტნო-მაჭახელა",
    "(405451318-დღგ) შპს რესტორან ჯგუფი",
    "(404498290-დღგ) შპს ფასანაური 2015",
    "(405460031-დღგ) შპს ბურგერ სფეისი",
    "(435897335) შპს ლისის ბუფეტი",
    "(205089526-დღგ) შპს ბაქსვუდის საერთაშორისო სკოლა - თბილისი",
    "(400314655-დღგ) შპს გემო",
    "(405236864-დღგ) შპს კანტინერია",
    "(424072782-დღგ) შპს გულიანი",
    "(404535561-დღგ) შპს საბურთალო მენეჯმენტი",
    "(405172094-დღგ) შპს გრინ თაუერი",
    "(402237637-დღგ) შპს მეჯიქ სოუსი",
    "(405618933-დღგ) შპს ლანჩრუმ",
    "(205172917-დღგ) შპს ევროპული სკოლა",
    "(01027015485-დღგ) ვახტანგ ათაბეგაშვილი",
    "(402174801-დღგ) შპს სახლი ვერაზე",
    "(420438048-დღგ) შპს ფლოვ",
    "(43001044554) ნინო ხაჭაპურიძე",
    "(405167947-დღგ) შპს მს ჯგუფი",
    "(404638479-დღგ) შპს ვ.დ. დისტრიბუცია",
    "(204900358-დღგ) შპს ვარაზის ხევი 95",
    "(405270987-დღგ) შპს ნეკაფე",
    "(05001011943) ივანე კეღოშვილი",
    "(400252203-დღგ) შპს ჩვენი",
    "(406033224) შპს კონსტრაქშენ სერვაის",
    "(406350256-დღგ) შპს ნიტრო",
    "(405432045-დღგ) შპს ტოპ ზე შეიკერ",
    "(60003011872-დღგ) რამინი გამგებელი",
    "(49001004727) ფატიმა მურცხვალაძე",
    "(35001049355) არჩილი შუბითიძე",
    "(01025016298) სალომე მანდარია",
    "(405410773-დღგ) შპს სთრით ფუდი",
    "(406146371-დღგ) შპს სიმბა 2015",
    "(402223679-დღგ) შპს სანჩო19",
    "(26001015004-დღგ) ვერიკო ქურიძე",
    "(01024015970-დღგ) მარინე კილაძე",
    "(203868644) შპს ეპოქა 2000",
    "(405480750-დღგ) შპს მეგა",
    "(01005009462-დღგ) მაია ხვისტანი",
    "(01013008987) გიორგი ბახტაძე",
    "(454408891-დღგ) შპს ფუდ-ჰარტი",
    "(402237316) შპს რიჩ9",
    "(405229792-დღგ) შპს ტიფლის ფაბ",
    "(49001004847) თეა არჯევანიძე",
    "(422728187-დღგ) შპს ქეი.ემ",
    "(402089057-დღგ) შპს სტარ+",
    "(405712082-დღგ) შპს ბაქსვუდის სკოლა გელოვანზე",
    "(400330655-დღგ) შპს ფუდსელი",
    "(416373873-დღგ) შპს ტაი ინდი ჯგუფი",
    "(01017023081-დღგ) ინა აივაზოვა",
    "(01011063903-დღგ) ნარგიზი ადეიშვილი - ოჯახური სამზარეულო ქართული გემო",
    "(405129999-დღგ) შპს ბუდვაიზერი - სამსონი",
    "(404500223-დღგ) შპს ბაგები",
    "(13001057796-დღგ) თამარი ღვინაშვილი",
    "(56001012315) ელენა ბოგვერაძე",
    "(416330116-დღგ) შპს საქართველოს ფერმერთა სადისტრიბუციო კომპანია",
    "(405603459-დღგ) შპს ლუდი 2023",
    "(202239032-დღგ) შპს აკვავიტე",
    "(404474662-დღგ) შპს უკვე",
    "(406360156-დღგ) შპს იომ იომ",
    "(37001001217) ნანა კაკაბაძე",
    "(01017047552) ნიკა კვირიკაძე",
    "(416340178-დღგ) შპს ფრიზი ჯორჯია",
    "(400218411-დღგ) შპს ფუდ სერვისი",
    "(405358027-დღგ) შპს ფასანაური 2020",
    "(445727376-დღგ) შპს ჯეოფიტმენი",
    "(01027026866) ნინო ლომიძე",
    "(31001049365) მზევინარი ყირიმლიშვილი",
    "(405115842) შპს სანდრო 2013",
    "(405717522-დღგ) შპს აუგუსტ ბეიქერი",
    "(400382965-დღგ) შპს თალალო2024",
    "(01002007372) დავით ცარციძე",
    "(406276630-დღგ) შპს შაურმის სახლი",
    "(01030036909-დღგ) ლაშა ბარამიძე",
    "(405586717-დღგ) შპს დასავლეთ ევროპისა და იაპონიის სურსათი (დის)",
    "(01012000624) ილია ხიპაშვილი",
    "(427745933) შპს არტკაფე 1",
    "(01024024748) მაკა შეყლაშვილი",
    "(406348590-დღგ) შპს ტამტამ",
    "(412764888-დღგ) შპს ანი-პონჩო",
    "(01024089232) გიგა მელიქიძე - ბიგ შაურმა 14",
    "(405309884-დღგ) შპს თეისთი",
    "(402254421-დღგ) შპს ტაი-ტაი",
    "(405379442-დღგ) შპს ქალაქი 27",
    "(53001015069-დღგ) ბადრი ჯურხაძე",
    "(406469771) შპს ჩურჩუტელა",
    "(16001001737) გოდერძი ჯაბანაშვილი",
    "(404730145) შპს ბი ბაქ",
    "(01027074966) ნოდარი ხეცაძე",
    "(01027070170) მაგდა ბოგვერაძე - ელენეს ბარი",
    "(406283338-დღგ) შპს ლუდსახარში ორი კათხა",
    "(46001001198-დღგ) ირმა შარაშიძე",
    "(01019077945) ვახტანგ იასაღაშვილი",
    "(406335719-დღგ) შპს რაჭული კერია",
    "(01019067134) ბექა ნარიმანიძე",
    "(209439730-დღგ) შპს საჭე-92",
    "(406471081) შპს რკ რესთორანთ",
    "(405472117-დღგ) შპს კით კლუბი",
    "(404689379-დღგ) შპს აბერინტ",
    "(405178007-დღგ) შპს თერთმეტი",
    "(405540446-დღგ) შპს პინო ვერა",
    "(400345426-დღგ) შპს დიღომი ჰუდი",
    "(402293460) შპს ლბ ტრეიდინგ",
    "(404735612) შპს ეს.ქეი. სამზარეულო",
    "(35001069642-დღგ) გულნარა გუგენიშვილი",
    "(01005021824) გაიოზ გაგნიძე",
    "(01012010768) სვეტლანა გრიგორიან",
    "(429655170-დღგ) შპს სტრიჩა",
    "(01004001806) ვლადიმერ ტარიელაშვილი",
    "(46001014467-დღგ) ცირა სიხარულიძე",
    "(405610245-დღგ) შპს ბენტო",
    "(405562092-დღგ) შპს ფალაფელ სთორიზ",
    "(402332864) შპს ტაი თბილისი",
    "(406501851) შპს პალერმო 2025",
    "(62001032845-დღგ) ვარლამ ცაგურია",
    "(51001031026) ლიზიკო ფიფია",
    "(400408144) შპს გემრიელი1",
    "(01005026999-დღგ) ზურაბ როსტიაშვილი",
    "(01019077189-დღგ) გივი გივიშვილი",
    "(01017038647) სალომე კობრავა - შefi ბორბლებზე",
    "(01011096774) ანნა უშიკიშვილი",
    "(402263616-დღგ) შპს სარანტინო",
    "(429322529-დღგ) შპს ტაიფუდი",
    "(405706071-დღგ) შპს შნო მოლი",
    "(443573839) შპს ისთ2ა",
    "(429654778-დღგ) შპს კრაფტ ფუდ რესტორნები",
    "(306366955-დღგ) ევგენიი პოდოსენოვ",
    "(445548257-დღგ) შპს პიანსე",
    "(01020006169-დღგ) ეკა ვაჭარაძე-ხაჩიძე",
    "(400287104-დღგ) შპს მს გლდანი",
    "(406443086) შპს ქასიმია ვარდ",
    "(404856713-დღგ) შპს პიანო",
    "(343573396-დღგ) ოლეკსეი კლიჩ",
    "(01017010170) ლალი აბრამია",
    "(304653355-დღგ) რომან ვასილევ",
    "(01027074366-დღგ) თეა ხმიადაშვილი",
    "(01011053667-დღგ) რობერტ კარაპეტიანი",
    "(405371707-დღგ) შპს იმერული ეზო ნატახტარში",
    "(01008032877) სვეტლანა რაზმაძე",
    "(01011061254) მელიტა ჩანკიანი",
    "(01024090962) ნიკა ლაფანაშვილი - გრინ ფუდი",
    "(21001000870) იხედა ხოხიაშვილი",
    "(18001069039) თორნიკე ოსაძე",
    "(405356966-დღგ) შპს სმეში",
    "(01011069302-დღგ) ნატალია დელიბაშვილი",
    "(18001023164) კარპე ჩაგელიშვილი",
    "(01001017253-დღგ) ხათუნა ფოლადიშვილი",
    "(405712607) შპს რესტო ლინკს",
    "(404738600-დღგ) შპს ჯაფე ბარი აუდიტორია",
    "(405590267-დღგ) შპს ფასანაური 2023",
    "(406422731-დღგ) შპს ბელვიუ ბუტიკ",
    "(402282702-დღგ) შპს პალას გრუპ",
    "(405241064-დღგ) შპს სქაი",
    "(422727115-დღგ) შპს ოპინიონ",
    "(404632153-დღგ) შპს დიზაინ ჰოთელ",
    "(405496841-დღგ) შპს იზიდრაივი",
    "(405640098-დღგ) შპს სქულფუდ",
    "(416378235) შპს ქეთი და ლივიას კომპანია",
    "(406154655-დღგ) შპს კოპალა 3",
    "(436059113) შპს ფუდაჰოლიკ",
    "(47001044793) ბაკური ბარბაქაძე",
    "(404735612-დღგ) შპს ეს.ქეი. სამზარეულო",
    "(11001029338) ალექსანდრე გოგსაძე",
    "(405586307-დღგ) შპს ლიმონჩიკი-2022",
    "(405696073-დღგ) შპს პეკინის სასტუმრო",
    "(404965169) შპს ქართულ-ამერიკული სკოლა. Georgian-American School",
    "(300360348) პერელ ვებერ",
    "(404697672-დღგ) შპს სევენ.ჯ",
    "(444555205) შპს სთარ ბოის 2024",
    "(406477771-დღგ) შპს კვების სახლი მაისურაძე",
    "(406487724) შპს მოსე ჯეო",
    "(406505857) შპს კუმარ ინდიან კაფე",
    "(402237316-დღგ) შპს რიჩ9",
    "(405561495-დღგ) შპს ფიროსმანის დუქანი",
    "(402051060-დღგ) შპს ჯაპანჯორჯია",
    "(405449652-დღგ) შპს ენჰაიტ +",
    "(01013022033-დღგ) მარიამ გოგოლაური",
    "(402293503-დღგ) შპს ფალას ქითჩენ",
    "(406469771-დღგ) შპს ჩურჩუტელა",
    "(400411354) პკ ლუბლიანა",
    "(405712082-დღგ) შპს ბაქსვუდის საერთაშორისო სკოლა თბილისი",
    "(17001027247) მალხაზ ღვინიანიძე",
    "(01019036167-დღგ) ირმა წიკლაური",
    "(208156261) შპს დამოუკიდებელი სკოლა მოძღვარი",
    "(01005042245-დღგ) ნათია მერებაშვილი",
    "(405598713-დღგ) შპს კატოსან",
    "(405591024) შპს თეისთ 2023",
    "(405772837) შპს კარმიანი",
    "(406415393-დღგ) შპს რჯ 22",
    "(406421340-დღგ) შპს ამბიცია",
    "(400357886-დღგ) შპს ნატახტარი 1717",
    "(14001029502-დღგ) ხვიჩა ფუტკარაძე",
    "(405325919-დღგ) შპს საბა 0407",
    "(404869585-დღგ) შპს MASURO",
    "(01031005407) ალექსანდრე ხერხეულიძე",
    "(402332864-დღგ) შპს ტაი თბილისი",
    "(406502574) შპს აბუ თი შოპ ჯი",
    "(402290427-დღგ) შპს როიალ გრუპ 2023",
    "(405462645) შპს ვიაიპი",
    "(01001081286) ალეკო ქისიშვილი",
    "(420440614-დღგ) შპს აზია ფუდ ფროდაქშენ",
    "(405010884-დღგ) შპს მწვანე კრეატივი",
    "(405559211) შპს თეისთ 33",
    "(01001069953) გიორგი ქარუმიძე",
    "(405625337-დღგ) შპს ვექსან",
    "(426553641-დღგ) შპს მსუყე 2024",
    "(404401036-დღგ) შპს MSR",
    "(438730928-დღგ) შპს მწვადის შაურმა 2018",
    "(34001000341) მერაბი ბერიშვილი",
    "(406361823-დღგ) შპს რ ნ ა ენთერფრაისის",
    "(400426197) შპს ოცდაცამეტი 33",
    "(430041037-დღგ) შპს გიორგი 2020",
    "(404894664-დღგ) შპს A.M.D",
    "(422954164) შפס ეს ემ ენ 24",
    "(405747492-დღგ) შპს ცხრა ტონა",
    "(01001085847) ინგა გოროზია",
    "(01005030182) გურამ მამულია ფასთ შაურმა",
    "(62001008537-დღგ) ალექსანდრე მელია",
    "(400008996-დღგ) შპს ვახტანგური",
    "(402307865-დღგ) შპს ბეღელი საოჯახო სამზარეულო",
    "(400407172-დღგ) შპს კანჭი +",
    "(404703111-დღგ) შპს ევრაზიის კომპანია",
    "(404407879-დღგ) შპს გურმე",
    "(01011031260) რობერტ მელიქიანი",
    "(405681873-დღგ) შპს ჩინებული გემო",
    "(39001001157) ლელა სიგუა",
    "(31001005011) გიორგი პეტრიაშვილი",
    "(01324092802) ნიკა სადაღაშვილი",
    "(404471923-დღგ) შპს ახალი ჯგუფი",
    "(422956144) შპს ალ მალაკ 1",
    "(60002013368) მიხეილი გვენეტაძე",
    "(441565646) შპს ჩიკიტა",
    "(19001033684-დღგ) თეონა თორია",
    "(405616640-დღგ) შპს გბნ1 გრუპი",
    "(406514482-დღგ) შპს გასტრო ფაქტორი",
    "(438738706-დღგ) შპს კოკა777",
    "(21001000870-დღგ) იმედა ხოხიაშვილი",
    "(300400796-დღგ) ვალენტინ პანკოვ",
    "(405245471-დღგ) შპს გესთი",
    "(01008063023) ნოდარ ლუტიძე",
    "(01026006548-დღგ) ნანული წიკარიშვილი",
    "(400181726) შპს დე.დე.ან.",
    "(345703535-დღგ) რომან კონოვალოვ",
    "(406519502) შპს ანადოლუ სოფრასი",
    "(402337921) შპს ჰანგრი დაინ",
    "(405779607) შპს ბიძია სემ",
    "(405757220-დღგ) ლიდერობის გაძლიერებისა და განვითარების აკადემია",
    "(20001053352) მაჰირა ბაირამოვა",
    "(01101140814-დღგ) ალბინა ხუდოიანი",
    "(336064671) მუსტაფჰა აბუ მუამარ - 100 არაბული რესტორანი",
    "(402301424-დღგ) შპს ჩვენი 2024",
    "(304637631) სარაჰ ბასიმ მოჰამმედ ალ ხაშალატ",
    "(432554684) შპს არქეი რესთორანთ 02",
    "(406520947) შპს ფუკეტი თბილისი",
    "(400132183-დღგ) შპს ნიკორა",
    "(405757122) შპს კანადუსი",
    "(405769226-დღგ) შპს ტაუკ",
    "(402097903-დღგ) შპს მიქსი",
    "(39001039071) თამარი ესებუა",
    "(19001107699) სალომე ჭანტურია",
    "(405640622-დღგ) შპს ჰefi ედუ",
    "(28001065242) ნინო ბასილაძე",
    "(57001008507) ნინო ფატარიძე",
    "(47001038018) ნინო კაპანაძე",
    "(18001020985-დღგ) ირინა აბესალაშვილი",
    "(405707542-დღგ) შპს რამენის კომპანია",
    "(402297787-დღგ) შპს ასი-100",
    "(01001028588) თეა ხიზანიშვილი",
    "(01006019107) გურანდა ლაღაძე",
    "(48001003559) შორენა ნაჭყებია",
    "(405702912-დღგ) შპს მედფუდი 24",
    "(426140179-დღგ) შპს ავენიუ 80",
    "(21001039842) გაგა ბუცხრიკიძე"
]

# Load customers from JSON file (or create with default if not found)
try:
    with open('customers.json', 'r', encoding='utf-8') as f:
        customers = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    customers = DEFAULT_CUSTOMERS
    with open('customers.json', 'w', encoding='utf-8') as f:
        json.dump(customers, f, ensure_ascii=False, indent=4)
    logger.info("Created customers.json with default list due to FileNotFoundError or invalid JSON")

# Parse customers into dict: name -> full
name_to_full = {}
for c in customers:
    c = c.strip()
    if c:
        match = re.match(r'\((.*?)\)\s*(.*)', c)
        if match:
            name = match.group(2).strip()
            full = c
        else:
            name = c
            full = c
        if name:
            name_to_full[name] = full

# Function to save customers back to JSON
def save_customers():
    with open('customers.json', 'w', encoding='utf-8') as f:
        json.dump(customers, f, ensure_ascii=False, indent=4)
    logger.info("Saved updated customers to customers.json")

# Strict pattern: name (any text) space amount (digits)
STRICT_PATTERN = r'^(.*)\s(\d+)$'

# Loose pattern: contains digit
LOOSE_PATTERN = r'\d'

# Function to parse payment
def parse_payment(text):
    match = re.match(STRICT_PATTERN, text.strip())
    if match:
        name = match.group(1).strip()
        amount = match.group(2)
        return name, amount
    return None

# Handler for new and edited messages with retry
@retry(stop=stop_after_attempt(3), wait=wait_fixed(2), retry=retry_if_exception_type(telegram.error.NetworkError))
async def handle_message(update: Update, context):
    message = update.message or update.edited_message
    if not message or not message.text:
        logger.debug("No text in message or message is None")
        return

    text = message.text
    message_id = message.message_id
    username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name}".strip()
    chat_id = message.chat_id
    is_edited = update.edited_message is not None
    source = 'Edited' if is_edited else 'Direct'

    logger.debug(f"Received message: text='{text}', chat_id={chat_id}, message_id={message_id}, is_edited={is_edited}, username={username}")

    # Check if in adding mode
    if context.user_data.get('adding_customer', False):
        new_customer = text.strip()
        match = re.match(r'\((.*?)\)\s*(.*)', new_customer)
        if match:
            new_name = match.group(2).strip()
            full = new_customer
        else:
            new_name = new_customer
            full = new_customer

        pending = context.user_data.get('pending_payment')
        if pending and new_name == pending['name']:
            customers.append(full)  # Append to list
            name_to_full[new_name] = full  # Update dict
            save_customers()  # Save to JSON
            await record_to_sheets(datetime.now().strftime('%Y-%m-%d %H:%M:%S'), full, pending['amount'], pending['source'], username)
            logger.info(f"New customer added and payment recorded: {full} {pending['amount']} by {username}")
            await message.reply_text(f"ახალი კლიენტი დამატებულია და გადახდა ჩაწერილია: {full} {pending['amount']}")
        else:
            await message.reply_text("სახელი არ ემთხვევა. გთხოვთ სცადოთ თავიდან.")

        context.user_data['adding_customer'] = False
        if 'pending_payment' in context.user_data:
            del context.user_data['pending_payment']
        return

    # Normal processing
    parsed = parse_payment(text)
    if parsed:
        name, amount = parsed
        logger.debug(f"Parsed payment: name={name}, amount={amount}")
        if is_edited and message_id in pending_messages:
            pending_messages.remove(message_id)
        await try_record(update, context, name, amount, source, username)
        return

    # Loose check for new messages only
    if not is_edited and re.search(LOOSE_PATTERN, text):
        pending_messages.add(message_id)
        keyboard = [
            [
                InlineKeyboardButton("დიახ", callback_data=f"yes_payment_{message_id}"),
                InlineKeyboardButton("არა", callback_data=f"no_payment_{message_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text("ეს გადახდის შესახებ მესიჯია?", reply_markup=reply_markup)
        logger.debug(f"Sent 'Is this payment?' prompt for message_id={message_id}")
    elif is_edited and message_id in pending_messages:
        await message.reply_text("ფორმატი კვლავ არასწორია. გთხოვთ შეცვალოთ: კლიენტის სახელი თანხა")
        logger.debug(f"Invalid edited format for message_id={message_id}")

# Try to record after parsing with retry
@retry(stop=stop_after_attempt(3), wait=wait_fixed(2), retry=retry_if_exception_type(telegram.error.NetworkError))
async def try_record(update, context, name, amount, source, username):
    message = update.message or update.edited_message
    if name in name_to_full:
        customer_full = name_to_full[name]
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        await record_to_sheets(timestamp, customer_full, amount, source, username)
        logger.info(f"Payment recorded: {customer_full} {amount} ({source}) by {username}")
        await message.reply_text(f"ჩაწერილი გადახდა: {customer_full} {amount}")
    else:
        message_id = message.message_id
        keyboard = [
            [
                InlineKeyboardButton("დიახ", callback_data=f"add_yes_{message_id}"),
                InlineKeyboardButton("არა", callback_data=f"add_no_{message_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(f"კლიენტი '{name}' არ მოიძებნა. გსურთ ახალი კლიენტის დამატება?", reply_markup=reply_markup)
        context.user_data['pending_payment'] = {'name': name, 'amount': amount, 'source': source, 'message_id': message_id}
        logger.debug(f"Sent 'Add new customer?' prompt for name={name}, message_id={message_id}")

# Handler for button callbacks with retry
@retry(stop=stop_after_attempt(3), wait=wait_fixed(2), retry=retry_if_exception_type(telegram.error.NetworkError))
async def handle_callback(update: Update, context):
    query = update.callback_query
    await query.answer()

    data = query.data
    parts = data.split('_')
    action = parts[0]
    sub_action = parts[1] if len(parts) > 1 else ''
    message_id = int(parts[-1])

    logger.debug(f"Received callback: data={data}, message_id={message_id}")

    if action == "yes" and sub_action == "payment":
        if message_id in pending_messages:
            await query.edit_message_text("გთხოვთ შეცვალოთ მესიჯი სწორ ფორმატში: კლიენტის სახელი თანხა")
            logger.debug(f"Prompted to edit message for message_id={message_id}")

    elif action == "no" and sub_action == "payment":
        if message_id in pending_messages:
            pending_messages.remove(message_id)
            await query.edit_message_text("კარგი, იგნორირებულია.")
            logger.debug(f"Ignored payment for message_id={message_id}")

    elif action == "add" and sub_action == "yes":
        await query.edit_message_text("გთხოვთ დაწეროთ ახალი კლიენტის სახელი (ფორმატი: (კოდი) სახელი ან უბრალოდ სახელი)")
        context.user_data['adding_customer'] = True
        logger.debug(f"Prompted to add new customer for message_id={message_id}")

    elif action == "add" and sub_action == "no":
        await query.edit_message_text("კარგი, იგნორირებულია.")
        if 'pending_payment' in context.user_data:
            del context.user_data['pending_payment']
        logger.debug(f"Ignored new customer addition for message_id={message_id}")

# Function to record to Google Sheets with retry
@retry(stop=stop_after_attempt(3), wait=wait_fixed(2), retry=retry_if_exception_type(Exception))
async def record_to_sheets(timestamp, customer, amount, source, sender):
    try:
        sheet = CLIENT.open(SHEET_NAME).worksheet(WORKSHEET_NAME)
        row = [timestamp, customer, amount, source, sender]
        sheet.append_row(row)
        logger.debug(f"Recorded to Sheets: {row}")
    except Exception as e:
        logger.error(f"Error recording to Sheets: {e}")
        raise  # Re-raise for tenacity retry

# Main function
async def main():
    # Create the Application
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Initialize the application
    await application.initialize()

    # Handlers
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # Add timeout for pending messages if JobQueue is available
    if application.job_queue:
        async def clear_pending(context):
            global pending_messages
            pending_messages.clear()
            logger.info("Cleared pending messages")
        application.job_queue.run_once(clear_pending, 600)  # Clear every 10 minutes
    else:
        logger.warning("JobQueue not available; pending messages will not be cleared automatically")

    # Start polling
    try:
        await application.run_polling()
    finally:
        await application.shutdown()

def run():
    loop = asyncio.get_event_loop()
    if loop.is_running():
        # If loop is running, create a new task
        asyncio.ensure_future(main())
    else:
        # Otherwise, run normally
        loop.run_until_complete(main())

if __name__ == '__main__':
    try:
        run()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Error running bot: {e}")