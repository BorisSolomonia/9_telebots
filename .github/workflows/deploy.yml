name: 🚀 Deploy Telegram Bots

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-west3
  VM_HOST: ${{ secrets.VM_HOST }}
  DEPLOY_PATH: /opt/apps/telegram-bots

jobs:
  build-and-deploy:
    name: 🏗️ Build & Deploy Telegram Bots
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ✅ Validate Required Secrets
        run: |
          if [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
            echo "❌ ERROR: GCP_PROJECT_ID secret is not set"
            echo "Please add GCP_PROJECT_ID to your GitHub repository secrets"
            exit 1
          fi
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "❌ ERROR: GCP_SA_KEY secret is not set"
            echo "Please add your service account key to GitHub repository secrets"
            exit 1
          fi
          if [ -z "${{ secrets.VM_HOST }}" ]; then
            echo "❌ ERROR: VM_HOST secret is not set"
            echo "Please add your VM IP address to GitHub repository secrets"
            exit 1
          fi
          echo "✅ All required secrets are configured"
          echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "VM_HOST: ${{ env.VM_HOST }}"
          echo "REGION: ${{ env.REGION }}"

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: 🏗️ Build & Push Bot Images
        env:
          IMAGE: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/apps/telegram-bots
        run: |
          # Build unified bot image
          docker build \
            --tag "${IMAGE}:${{ github.sha }}" \
            --tag "${IMAGE}:latest" .
          
          docker push "${IMAGE}:${{ github.sha }}"
          docker push "${IMAGE}:latest"

      - name: 📤 Upload Deployment Files
        run: |
          echo "📤 Uploading deployment files to VM..."
          
          # Create temporary directory for files
          mkdir -p /tmp/deploy-files
          cp docker-compose.yml Caddyfile .dockerignore /tmp/deploy-files/
          
          # Upload files using gcloud scp
          gcloud compute scp /tmp/deploy-files/* \
            ${{ secrets.VM_SSH_USER }}@telegram-bots-vm:${{ env.DEPLOY_PATH }}/ \
            --zone=europe-west3-a \
            --project=${{ env.PROJECT_ID }} \
            --recurse

      - name: 🚀 Deploy Telegram Bots
        run: |
          echo "🚀 Deploying Telegram Bots via gcloud ssh..."
          
          gcloud compute ssh ${{ secrets.VM_SSH_USER }}@telegram-bots-vm \
            --zone=europe-west3-a \
            --project=${{ env.PROJECT_ID }} \
            --command="
            echo '🚀 Deploying Telegram Bots...'
            
            # Setup deployment directory
            sudo mkdir -p ${{ env.DEPLOY_PATH }}
            sudo chown -R \$USER:\$USER ${{ env.DEPLOY_PATH }}
            cd ${{ env.DEPLOY_PATH }}
            
            # Fetch runtime secrets from Secret Manager
            gcloud secrets versions access latest \
              --secret='telegram-bots-env' \
              --project=${{ env.PROJECT_ID }} > .env
            
            # Update docker-compose to use registry image
            sed -i 's|build: .|image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/apps/telegram-bots:latest|g' docker-compose.yml
            
            # Pull latest images
            gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
            docker compose pull
            
            # Deploy the stack
            docker compose down --remove-orphans
            docker compose up -d --wait
            
            echo '✅ Telegram bots deployment completed'
            "

      - name: 🔍 Health Check
        run: |
          echo "🔍 Running health checks via gcloud ssh..."
          
          gcloud compute ssh ${{ secrets.VM_SSH_USER }}@telegram-bots-vm \
            --zone=europe-west3-a \
            --project=${{ env.PROJECT_ID }} \
            --command="
            echo '🔍 Testing telegram bot deployment...'
            
            # Wait for services to be ready
            sleep 30
            
            # Change to deployment directory
            cd ${{ env.DEPLOY_PATH }}
            
            # Test health endpoint
            if curl -f --connect-timeout 10 http://localhost/health >/dev/null 2>&1; then
              echo '✅ Health check passed'
            else
              echo '❌ Health check failed'
              curl -v http://localhost/health
              exit 1
            fi
            
            # Test bot status endpoints
            curl -f http://localhost/bots/payment/status && echo '✅ Payment bot OK' || echo '⚠️ Payment bot status unavailable'
            curl -f http://localhost/bots/order/status && echo '✅ Order bot OK' || echo '⚠️ Order bot status unavailable'
            
            echo '🐳 Container status:'
            docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
            
            echo '📋 Recent logs:'
            docker compose logs --tail=10
            "