name: üîç Diagnose GCP Permissions

on:
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-west3

jobs:
  diagnose:
    name: üîç Deep Permission Diagnosis
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚òÅÔ∏è Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üîç Step 1: Identify Active Service Account
        run: |
          echo "üîç STEP 1: IDENTIFYING ACTIVE SERVICE ACCOUNT"
          echo "============================================="
          echo "Active account:"
          gcloud auth list --filter=status:ACTIVE --format="value(account)"
          echo ""
          echo "Service account details:"
          ACTIVE_SA=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")
          gcloud iam service-accounts describe "$ACTIVE_SA" --project=${{ env.PROJECT_ID }} || echo "Could not describe service account"
          echo ""

      - name: üîç Step 2: Check Service Account Permissions
        run: |
          echo "üîç STEP 2: CHECKING SERVICE ACCOUNT PERMISSIONS"
          echo "==============================================="
          ACTIVE_SA=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")
          echo "Checking permissions for: $ACTIVE_SA"
          echo ""
          echo "IAM policy bindings for this service account:"
          gcloud projects get-iam-policy ${{ env.PROJECT_ID }} \
            --flatten="bindings[].members" \
            --format='table(bindings.role,bindings.members)' \
            --filter="bindings.members:$ACTIVE_SA"
          echo ""

      - name: üîç Step 3: Test Compute Access Incrementally
        run: |
          echo "üîç STEP 3: TESTING COMPUTE ACCESS INCREMENTALLY"
          echo "==============================================="
          
          echo "3a. Testing basic compute access..."
          if gcloud compute zones list --limit=1 >/dev/null 2>&1; then
            echo "‚úÖ Can list compute zones"
          else
            echo "‚ùå Cannot list compute zones"
          fi
          
          echo ""
          echo "3b. Testing project access..."
          if gcloud compute instances list --project=${{ env.PROJECT_ID }} >/dev/null 2>&1; then
            echo "‚úÖ Can list instances in project"
            gcloud compute instances list --project=${{ env.PROJECT_ID }} --format="table(name,zone,status)"
          else
            echo "‚ùå Cannot list instances in project"
          fi
          
          echo ""
          echo "3c. Testing specific VM access..."
          if gcloud compute instances describe vm-runtime --zone=europe-west3-b --project=${{ env.PROJECT_ID }} >/dev/null 2>&1; then
            echo "‚úÖ Can describe vm-runtime"
          else
            echo "‚ùå Cannot describe vm-runtime - THIS IS THE PROBLEM!"
            echo "Detailed error:"
            gcloud compute instances describe vm-runtime --zone=europe-west3-b --project=${{ env.PROJECT_ID }} 2>&1 || true
          fi
          
          echo ""
          echo "3d. Testing metadata access..."
          if gcloud compute instances add-metadata vm-runtime \
               --zone=europe-west3-b \
               --project=${{ env.PROJECT_ID }} \
               --metadata=test-key=test-value \
               --dry-run 2>/dev/null; then
            echo "‚úÖ Can add metadata (dry run)"
          else
            echo "‚ùå Cannot add metadata"
            echo "Detailed error:"
            gcloud compute instances add-metadata vm-runtime \
              --zone=europe-west3-b \
              --project=${{ env.PROJECT_ID }} \
              --metadata=test-key=test-value \
              --dry-run 2>&1 || true
          fi

      - name: üîç Step 4: Check APIs and Organization Policies
        run: |
          echo "üîç STEP 4: CHECKING APIS AND ORGANIZATION POLICIES"
          echo "=================================================="
          
          echo "4a. Checking required APIs..."
          REQUIRED_APIS=("compute.googleapis.com" "iam.googleapis.com" "cloudresourcemanager.googleapis.com")
          for api in "${REQUIRED_APIS[@]}"; do
            if gcloud services list --enabled --filter="name:$api" --format="value(name)" --project=${{ env.PROJECT_ID }} | grep -q "$api"; then
              echo "‚úÖ $api is enabled"
            else
              echo "‚ùå $api is NOT enabled"
            fi
          done
          
          echo ""
          echo "4b. Checking organization policies (if any)..."
          gcloud resource-manager org-policies list --project=${{ env.PROJECT_ID }} 2>/dev/null || echo "No organization policies or permission denied"

      - name: üîç Step 5: Test Alternative Permissions
        run: |
          echo "üîç STEP 5: TESTING ALTERNATIVE PERMISSIONS"
          echo "=========================================="
          
          echo "5a. Testing with different role assumptions..."
          ACTIVE_SA=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")
          
          echo "Current roles for $ACTIVE_SA:"
          gcloud projects get-iam-policy ${{ env.PROJECT_ID }} \
            --flatten="bindings[].members" \
            --format='value(bindings.role)' \
            --filter="bindings.members:$ACTIVE_SA" | sort | uniq
          
          echo ""
          echo "5b. Checking if compute.admin role is properly applied..."
          if gcloud projects get-iam-policy ${{ env.PROJECT_ID }} \
             --flatten="bindings[].members" \
             --format='value(bindings.role)' \
             --filter="bindings.members:$ACTIVE_SA AND bindings.role:roles/compute.admin" | grep -q "roles/compute.admin"; then
            echo "‚úÖ Service account has roles/compute.admin"
          else
            echo "‚ùå Service account does NOT have roles/compute.admin"
          fi

      - name: üîç Step 6: Generate Diagnosis Report
        run: |
          echo "üîç FINAL DIAGNOSIS REPORT"
          echo "========================"
          echo ""
          echo "SUMMARY OF FINDINGS:"
          echo "- Active Service Account: $(gcloud auth list --filter=status:ACTIVE --format='value(account)')"
          echo "- Project ID: ${{ env.PROJECT_ID }}"
          echo "- Target VM: vm-runtime in europe-west3-b"
          echo ""
          echo "RECOMMENDED FIXES:"
          echo "1. If Step 3c fails: Service account needs compute.instances.get permission"
          echo "2. If APIs are disabled: Enable missing APIs"
          echo "3. If roles/compute.admin is missing: Re-add the role"
          echo "4. If organization policies block: Contact admin to modify policies"
          echo ""
          echo "NEXT STEPS:"
          echo "Run the specific failing command manually to get detailed error info"