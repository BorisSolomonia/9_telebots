name: 🚀 Deploy (no hardcoded vars; secrets-only)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: {}

defaults:
  run:
    shell: bash -euo pipefail

env:
  # All values come from Actions SECRETS only (no hardcoded constants)
  APP_NAME: ${{ secrets.APP_NAME }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  VM_HOST: ${{ secrets.VM_HOST }}
  VM_SSH_USER: ${{ secrets.VM_SSH_USER }}

jobs:
  build-and-push:
    name: 🏗️ Build & Push
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.meta.outputs.image_uri }}
      ar_host:   ${{ steps.meta.outputs.ar_host }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Auth GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: 🔎 Print versions
        run: |
          set -x
          gcloud --version
          docker version

      - name: 🔎 Discover Artifact Registry (DOCKER)
        id: ar
        run: |
          set -x
          # Pick the first DOCKER repo in the project
          line="$(gcloud artifacts repositories list --project "${GCP_PROJECT_ID}" \
                  --filter='format=DOCKER' \
                  --format='value(name,location)' | head -n1 || true)"
          if [[ -z "$line" ]]; then
            echo "❌ No DOCKER Artifact Registry found in project ${GCP_PROJECT_ID}."
            echo "Create one in Console → Artifact Registry → Repositories (format=DOCKER)."
            exit 1
          fi
          REPO="$(awk '{print $1}' <<<"$line")"
          REGION="$(awk '{print $2}' <<<"$line")"
          echo "repo=$REPO"   >> "$GITHUB_OUTPUT"
          echo "region=$REGION" >> "$GITHUB_OUTPUT"

      - name: 🐳 Configure docker for AR
        run: |
          set -x
          gcloud auth configure-docker ${{ steps.ar.outputs.region }}-docker.pkg.dev --quiet

      - name: 🏗️ Build & Push image
        id: meta
        run: |
          set -x
          AR_HOST="${{ steps.ar.outputs.region }}-docker.pkg.dev"
          IMAGE_BASE="${AR_HOST}/${GCP_PROJECT_ID}/${{ steps.ar.outputs.repo }}/${APP_NAME}"
          IMAGE_URI="${IMAGE_BASE}:${GITHUB_SHA}"

          echo "Building ${IMAGE_URI}"
          docker build \
            -f secure-docker-setup/Dockerfile.secure \
            -t "${IMAGE_URI}" \
            -t "${IMAGE_BASE}:latest" \
            --label "org.opencontainers.image.source=${{ github.repository }}" \
            --label "org.opencontainers.image.revision=${GITHUB_SHA}" \
            --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            .

          docker push "${IMAGE_URI}"
          docker push "${IMAGE_BASE}:latest"

          echo "image_uri=${IMAGE_URI}" >> "$GITHUB_OUTPUT"
          echo "ar_host=${AR_HOST}"     >> "$GITHUB_OUTPUT"

          echo "::group::Local images"
          docker images --digests | head -n 50
          echo "::endgroup::"

  deploy:
    name: 🚀 Deploy on VM
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Auth GCP (for Secret Manager + AR token)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: 🧾 Build .env from Secret Manager (<APP>-env)
        run: |
          set -x
          gcloud secrets versions access latest \
            --project "${GCP_PROJECT_ID}" \
            --secret "${APP_NAME}-env" > .env

          echo "::group::.env (first lines)"
          head -n 20 .env || true
          echo "::endgroup::"

      - name: 🔑 Get short-lived AR token
        id: token
        run: |
          set -x
          echo "token=$(gcloud auth print-access-token)" >> "$GITHUB_OUTPUT"

      - name: 📤 Copy repo files + .env to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ env.VM_HOST }}
          username: ${{ env.VM_SSH_USER }}
          key:      ${{ secrets.VM_SSH_KEY }}
          overwrite: true
          strip_components: 0
          source: |
            infra/
            secure-docker-setup/
            .env
          target: /opt/${{ env.APP_NAME }}/

      - name: 🐳 Deploy (compose up -d)
        uses: appleboy/ssh-action@v1.0.3
        env:
          AR_TOKEN:  ${{ steps.token.outputs.token }}
          AR_HOST:   ${{ needs.build-and-push.outputs.ar_host }}
          IMAGE_URI: ${{ needs.build-and-push.outputs.image_uri }}
          APP_NAME:  ${{ env.APP_NAME }}
        with:
          host:     ${{ env.VM_HOST }}
          username: ${{ env.VM_SSH_USER }}
          key:      ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail
            dco() { docker compose "$@" || docker-compose "$@"; }

            APP_DIR="/opt/${APP_NAME}"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            echo "🔐 Docker login to ${AR_HOST} using CI token"
            echo "${AR_TOKEN}" | docker login -u oauth2accesstoken --password-stdin "${AR_HOST}"

            echo "🕸️ Ensure networks"
            docker network create web 2>/dev/null || true
            docker network create bot_internal --internal 2>/dev/null || true

            echo "🧹 Stop previous services (idempotent)"
            dco -f secure-docker-setup/docker-compose.secure.yml down --remove-orphans || true
            if [ -d "infra/caddy" ]; then
              ( cd infra/caddy && dco down || true )
            fi

            echo "📝 Patch compose to use ${IMAGE_URI}"
            sed -i "s|^\s*build:.*|image: ${IMAGE_URI}|g" secure-docker-setup/docker-compose.secure.yml || true
            sed -i "s|^\s*context:.*||g" secure-docker-setup/docker-compose.secure.yml || true
            sed -i "s|^\s*dockerfile:.*||g" secure-docker-setup/docker-compose.secure.yml || true

            echo "🔐 Set perms"
            chmod 600 .env 2>/dev/null || true

            echo "🌐 Start/Reload Caddy (if present)"
            if [ -d "infra/caddy" ]; then
              cd infra/caddy
              dco up -d
              sleep 4
              dco ps || true
              cd "$APP_DIR"
            fi

            echo "🤖 Deploy app"
            dco -f secure-docker-setup/docker-compose.secure.yml pull
            dco -f secure-docker-setup/docker-compose.secure.yml up -d

            echo "🔎 Containers:"
            docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'

  health:
    name: 🏥 Health & Logs
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: 🔐 Auth GCP (for curl timeout on runner only)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🌐 External health check
        run: |
          set -x
          if timeout 12 curl -fsS "http://${{ env.VM_HOST }}/health" >/dev/null; then
            echo "✅ External /health OK"
          else
            echo "❌ External /health failed"
          fi

      - name: 🔎 VM container status & logs
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.VM_HOST }}
          username: ${{ env.VM_SSH_USER }}
          key:      ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail
            echo "🔍 docker ps"
            docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' || true

            echo
            echo "📋 Recent app logs (tail 200)"
            docker logs ${APP_NAME} --tail 200 || true

            echo
            echo "📋 Recent caddy logs (tail 120)"
            docker logs caddy  --tail 120 || true
            docker logs caddy-proxy --tail 120 || true
