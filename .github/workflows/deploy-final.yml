name: 🚀 Deploy Telegram Bots (Final)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-west3
  VM_HOST: 34.141.45.73
  DEPLOY_PATH: /opt/apps/telegram-bots

jobs:
  deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: 🏗️ Build & Push Image
        env:
          IMAGE: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/apps/telegram-bots
        run: |
          docker build -t "${IMAGE}:latest" .
          docker push "${IMAGE}:latest"

      - name: 📤 Deploy via SSH (Robust)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 300
          script: |
            set -e
            echo "🚀 Starting deployment..."
            
            # Setup directory
            sudo mkdir -p ${{ env.DEPLOY_PATH }}
            sudo chown -R $USER:$USER ${{ env.DEPLOY_PATH }}
            cd ${{ env.DEPLOY_PATH }}
            
            # Create basic .env (you can add your bot tokens here)
            cat > .env << 'ENV_EOF'
            # Add your environment variables here
            TELEGRAM_TOKEN_BOT=your-payment-bot-token
            ORDER_BOT_TOKEN=your-order-bot-token
            OPENAI_API_KEY=your-openai-key
            SHEET_NAME=9_ტონა_ფული
            WORKSHEET_NAME_PAYMENTS=Payments
            WORKSHEET_NAME_ORDERS=orders
            ENV_EOF
            
            # Create docker-compose.yml
            cat > docker-compose.yml << 'COMPOSE_EOF'
            version: "3.9"
            services:
              payment-bot:
                image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/apps/telegram-bots:latest
                container_name: payment-bot
                restart: unless-stopped
                command: ["python", "bot.py"]
                env_file: [.env]
                expose: ["8000"]
                networks: [web]
                mem_limit: 512m
                volumes: ["./logs:/app/logs"]
              
              order-bot:
                image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/apps/telegram-bots:latest
                container_name: order-bot
                restart: unless-stopped
                command: ["python", "order_bot.py"]
                env_file: [.env]
                expose: ["8001"]
                networks: [web]
                mem_limit: 512m
                volumes: ["./logs:/app/logs"]
              
              caddy:
                image: caddy:2-alpine
                container_name: caddy
                restart: unless-stopped
                ports: ["80:80", "443:443"]
                volumes:
                  - ./Caddyfile:/etc/caddy/Caddyfile:ro
                  - caddy_data:/data
                networks: [web]
                mem_limit: 128m
                
            volumes:
              caddy_data:
                external: true
            networks:
              web:
                external: true
            COMPOSE_EOF
            
            # Create Caddyfile
            cat > Caddyfile << 'CADDY_EOF'
            :80 {
              @health { path /health }
              respond @health "OK" 200
              
              handle /bots/payment/status {
                reverse_proxy payment-bot:8000
              }
              
              handle /bots/order/status {
                reverse_proxy order-bot:8001
              }
              
              handle /* {
                respond "9-Tones Telegram Bots - Status: Running" 200
              }
              
              encode gzip
            }
            CADDY_EOF
            
            # Setup Docker resources
            mkdir -p logs
            docker network create web 2>/dev/null || true
            docker volume create caddy_data 2>/dev/null || true
            
            # Deploy
            docker compose pull
            docker compose down --remove-orphans || true
            docker compose up -d
            
            echo "✅ Deployment completed!"
            docker compose ps

      - name: 🔍 Health Check
        run: |
          sleep 30
          curl -f "http://${{ env.VM_HOST }}/health" && echo "✅ Health OK" || echo "⚠️ Health check failed"
          echo "🎉 Deployment completed!"